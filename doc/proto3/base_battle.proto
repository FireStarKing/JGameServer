syntax = "proto3";
package com.jacey.game.common.proto3;

option optimize_for = SPEED;

import "common_enum.proto";
import "common_msg.proto";

// 一场战斗的信息
message BattleInfo {
	repeated UserBriefInfo userBriefInfos = 1;     // 玩家简略信息（按行动顺序排列）
	CurrentTurnInfo currentTurnInfo = 2;  			// 当前回合信息
	repeated int32 battleCellInfo = 3;             // 九宫格从左上角开始，下标为0，然后逐行逐列递增下标。没有棋子的位置值为0，否则值为先后手的行动顺序（先手为1，后手为2）
	int64 battleStartTimestamp = 4;       			// 战斗开始的时间戳
	repeated int32 notReadyUserIds = 5;            // 尚未准备开始游戏的玩家
	int32 lastEventNum = 6;               			// 对局中上一个事件编号
}

// 当前回合信息
message CurrentTurnInfo {
	int32 turnCount = 1;                  // 当前回合数（开局后，先手首个回合为1，再轮到先手行动时，回合数+1）
	int32 userId = 2;                     // 当前回合的玩家
	int64 turnStartTimestamp = 3;         // 当前回合开始的时间
}

// 战斗数据归档记录
message BattleRecordData {
	BattleTypeEnum battleType = 1;
	string battleId = 2;
	repeated UserBriefInfo userBriefInfos = 3;     // 玩家简略信息（按行动顺序排列）
	int64 battleStartTimestamp = 4;       // 战斗开始的时间戳
	int64 battleEndTimestamp = 5;         // 战斗结束的时间戳
	int32 turnCount = 6;                  // 对战了几回合
	int32 winnerUserId = 7;               // 获胜者的userId（平局为0）
	GameOverReasonEnum gameOverReason = 8;// 游戏结束的原因
}

// 获取当前所在对局的信息（GetBattleInfo = 6001）
message GetBattleInfoRequest {
}
message GetBattleInfoResponse {
	BattleInfo battleInfo = 1;
}

// 投降认输（Concede = 6002）
message ConcedeRequest {
}
message ConcedeResponse {
	EventMsgList eventList = 1;
}

// 落子（PlacePieces = 6003）
message PlacePiecesRequest {
	int32 lastEventNum = 1;             // 对局中上一个事件编号，以此可知客户端是否已同步最新对局信息
	int32 index = 2;                    // 落在哪个位置（九宫格0-8的下标位置）
}
message PlacePiecesResponse {
	EventMsgList eventList = 1;
}

// 确认可以开始游戏（ReadyToStartGame = 6005）
message ReadyToStartGameRequest {
}
message ReadyToStartGameResponse {
}


// ------------------------------ 事件相关 ------------------------------

// 事件类型
enum EventTypeEnum {
	EventTypeGameOver = 0;                         // 对战结束
	EventTypeStartTurn = 1;                        // 回合开始
	EventTypeEndTurn = 2;                          // 回合结束
	EventTypePlacePieces = 3;                      // 落子
}

// 一个事件消息
message EventMsg {
	int32 eventNum = 1;                   // 事件编号（从1计，一局游戏第1个事件为先手玩家的StartTurnEvent事件）
	EventTypeEnum eventType = 2;          // 事件类型

	GameOverEvent gameOverEvent = 6;
	StartTurnEvent startTurnEvent = 7;
	EndTurnEvent endTurnEvent = 8;
	PlacePiecesEvent placePiecesEvent = 9;
}

// 多个事件组成的事件组
message EventMsgList {
	repeated EventMsg msgList = 1;
}

// 游戏结束的原因
enum GameOverReasonEnum {
	GameOverPlayerWin = 0;                         // 一方胜利
	GameOverPlayerConcede = 1;                     // 一方投降
	GameOverDraw = 2;                              // 平局
}

// 游戏结束事件
message GameOverEvent {
	int32 winnerUserId = 1;               // 获胜者的userId（平局为0）
	GameOverReasonEnum gameOverReason = 2;// 游戏结束的原因
}

// 回合开始事件
message StartTurnEvent {
	CurrentTurnInfo currentTurnInfo = 1;  // 当前回合信息
}

// 回合结束事件
message EndTurnEvent {
	int32 endTurnUserId = 1;              // 结束了哪个玩家的回合
	bool isForceEndTurn = 2;              // 是否因为超时，由系统强制结束回合
}

// 落子事件
message PlacePiecesEvent {
	int32 userId = 1;                     // 哪个玩家的操作
	int32 index = 2;                      // 落在哪个位置（九宫格0-8的下标位置）
}

// ------------------------------ 服务器推送 ------------------------------

// 战斗服务器推送给玩家场上发生的事件信息（BattleEventMsgListPush = 22001）
message BattleEventMsgListPush {
	EventMsgList eventMsgList = 1;
}
